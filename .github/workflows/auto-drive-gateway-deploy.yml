name: Deploy Auto Drive Gateway

on:
  workflow_dispatch:
    inputs:
      target_machines:
        description: "Target machines to deploy to"
        required: true
        type: choice
        options:
          - auto_drive_multinetwork_gateway
      image_tag:
        description: "Docker image tag visit in the releases page at (https://github.com/autonomys/auto-drive/pkgs/container/auto-drive-backend)"
        required: true
        type: string

env:
  INFISICAL_CLIENT_ID: ${{ secrets.INFISICAL_CLIENT_ID }}
  INFISICAL_TOKEN: ${{ secrets.INFISICAL_TOKEN }}
  INFISICAL_PROJECT_ID: ${{ secrets.INFISICAL_PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Determine deployment parameters
        id: params
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger - use inputs
            TARGET_MACHINES="${{ github.event.inputs.target_machines }}"
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
            echo "Using manual inputs"
          else
            # Push trigger - use defaults
            TARGET_MACHINES="auto_drive_multinetwork_gateway"
            IMAGE_TAG=""  # or set a default like "latest"
            echo "Using push defaults"
          fi

          echo "target_machines=$TARGET_MACHINES" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

          echo "Final parameters:"
          echo "  Target machines: $TARGET_MACHINES"
          echo "  Image tag: $IMAGE_TAG"
          echo "  Trigger: ${{ github.event_name }}"

      - name: Install Ansible
        run: |
          pip install ansible

      - name: Setup hosts.ini
        run: |
          # generate & check if the hosts.ini is valid
          echo "${{ secrets.HOSTS_INI_BASE_64 }}" > ansible/hosts.base64
          base64 -d ansible/hosts.base64 > ansible/hosts.ini
          rm ansible/hosts.base64

          # Generate & print the sha256sum of the hosts.ini file
          ansible-inventory -i ansible/hosts.ini --list > /dev/null
          sha256sum ansible/hosts.ini

      - name: Setup private key
        run: |
          # generate & check if the ssh_private_key.pem is valid
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ansible/ssh_private_key.base64
          base64 -d ansible/ssh_private_key.base64 > ansible/ssh_private_key.pem
          chmod 600 ansible/ssh_private_key.pem
          ssh-keygen -l -f ansible/ssh_private_key.pem
          rm ansible/ssh_private_key.base64

      - name: Run Ansible Playbook
        run: |
          ansible-playbook ansible/auto-drive-multinetwork-gateway.yml \
            --private-key ansible/ssh_private_key.pem \
            -i ansible/hosts.ini \
            -e "target_machines=${{ steps.params.outputs.target_machines }}" \
            -e "image_tag=${{ steps.params.outputs.image_tag }}" \
            -e "infisical_client_id=${{ secrets.INFISICAL_CLIENT_ID }}" \
            -e "infisical_token=${{ secrets.INFISICAL_TOKEN }}" \
            -e "infisical_project_id=${{ secrets.INFISICAL_PROJECT_ID }}" \
            -vv 2>&1 | sed -E 's/([0-9]{1,3}\.){3}[0-9]{1,3}/<IP>/g' # hide IP addresses
        env:
          ANSIBLE_CONFIG: ansible/ansible.cfg

      - name: Deployment Status
        run: |
          echo "Deployment completed successfully!"
          echo "Target: ${{ github.event.inputs.target_machines }}"
          echo "Image: ${{ github.event.inputs.image_tag }}"

      - name: Clean up
        if: always()
        run: |
          rm -f ansible/hosts.ini || echo "error removing ansible/hosts.ini"
          rm -f ansible/ssh_private_key.pem || echo "error removing ansible/ssh_private_key.pem"
