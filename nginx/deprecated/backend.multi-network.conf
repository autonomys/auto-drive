# Define a zone for rate limiting
limit_req_zone $binary_remote_addr zone=mylimit:10m rate=100r/s;
limit_conn_zone $binary_remote_addr zone=addr:10m;
limit_req_status 429;

map $http_upgrade $connection_upgrade {

  default upgrade;
  ''      close;
}


server {
    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;

    server_name gateway.autonomys.xyz;

    location / {
        proxy_buffering off;
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
        proxy_set_header      Upgrade "$http_upgrade";
        proxy_set_header      Connection $connection_upgrade;
        proxy_cache_bypass    $http_upgrade;

    	# Enable CORS
    	add_header 'Access-Control-Allow-Origin' '*' always;
    	add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    	add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, X-Requested-With' always;

    }


    listen 443 ssl http2; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/gateway.autonomys.xyz/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/gateway.autonomys.xyz/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}



server {
    if ($host = gateway.autonomys.xyz) {
        return 301 https://$host$request_uri;
    } # managed by Certbot



    server_name gateway.autonomys.xyz;
    listen 80;
    return 404; # managed by Certbot


}